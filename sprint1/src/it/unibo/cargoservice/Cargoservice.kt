/* Generated by AN DISI Unibo */ 
package it.unibo.cargoservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Cargoservice ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
					val MAX_LOAD = System.getenv("MAX_LOAD")
					val SLOTS = System.getenv("SLOTS")
					
					var PID = -1
					var Productweight = 0.0F
					var Slot = -1
					var Loadedweight = 0.0F
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						CommUtils.outblue("$name: STARTING...")
						CommUtils.outblue("$name: initialization complete")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						CommUtils.outblue("$name: waiting for requests...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handle_loadproduct",cond=whenRequest("loadProduct"))
				}	 
				state("handle_loadproduct") { //this:State
					action { //it:State
						CommUtils.outblue("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("loadProduct(PID,Weight)"), Term.createTerm("loadProduct(PID,weight)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												PID = payloadArg(0).toInt()
												Productweight = payloadArg(1).toDouble()
								request("getFreeSlot", "getFreeSlot(1)" ,"holdmanager" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t11",targetState="evaluate_slot",cond=whenReply("freeSlot"))
				}	 
				state("evaluate_slot") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("freeSlot(Slot)"), Term.createTerm("freeSlot(Slot)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Slot = payloadArg(0)  
								if(  Slot > 0  
								 ){request("getLoadedweight", "getLoadedweight(1)" ,"dbwrapper" )  
								}
								else
								 {CommUtils.outblue("$name: load rejected, no more free slots")
								 answer("loadProduct", "loadRejected", "loadRejected(1)"   )  
								 forward("goToWait", "goToWait(1)" ,name ) 
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t22",targetState="evaluate_weight",cond=whenReply("loadedweight"))
					transition(edgeName="t23",targetState="wait",cond=whenDispatch("goToWait"))
				}	 
				state("evaluate_weight") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("loadweight(weight)"), Term.createTerm("loadedweight(Weight)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Loadedweight = payloadArg(0)  
								if(  (Loadedweight + Productweight) < MAX_LOAD  
								 ){CommUtils.outblue("$name: load accepted")
								forward("updateHold", "updateHold($Slot,$PID)" ,"holdmanager" ) 
								forward("updateLoadedweight", "updateLoadedweight($Productweight)" ,"dbwrapper" ) 
								answer("loadProduct", "loadAccepted", "loadAccepted(1)"   )  
								}
								else
								 {CommUtils.outblue("$name: load rejected, too heavy")
								 answer("loadProduct", "loadRejected", "loadRejected(1)"   )  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
} 
