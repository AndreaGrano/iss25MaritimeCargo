/* Generated by AN DISI Unibo */ 
package it.unibo.cargoservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Cargoservice ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
					val MAX_LOAD = 100
					
					var totalWeigth = 0.0
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						CommUtils.outblue("$name: STARTING...")
						CommUtils.outblue("$name: initialization complete")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						CommUtils.outblue("$name: waiting for requests...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="loadproduct",cond=whenRequest("loadProduct"))
				}	 
				state("loadproduct") { //this:State
					action { //it:State
						CommUtils.outblue("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("loadProduct(PID,Weigth)"), Term.createTerm("loadProduct(PID,Weigth)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  totalWeigth < MAX_LOAD  
								 ){
													val PID = payloadArg(0).toInt()
													val weigth = payloadArg(1).toDouble()
													totalWeigth = totalWeigth + weigth
								request("getProduct", "getProduct($PID)" ,"dbwrapper" )  
								}
								else
								 { var Message = "Too heavy"  
								 answer("loadProduct", "loadRefused", "loadRefused($Message)"   )  
								 CommUtils.outblue("$name: load refused: too heavy")
								 forward("goToWait", "goToWait(1)" ,name ) 
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t11",targetState="getproductanswered",cond=whenReply("getProductAnswer"))
					transition(edgeName="t12",targetState="wait",cond=whenDispatch("goToWait"))
				}	 
				state("getproductanswered") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("product(Name)"), Term.createTerm("getProductAnswer(Name)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var name = payloadArg(0)  
								if(  name.equals("NOTFOUND")  
								 ){ var Message = "Not found"  
								answer("loadProduct", "loadRefused", "loadRefused($Message)"   )  
								CommUtils.outblue("$name: load refused: product does not exist")
								}
								else
								 {answer("loadProduct", "loadAccepted", "loadAccepted(1)"   )  
								 CommUtils.outblue("$name: load accepted")
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
} 
