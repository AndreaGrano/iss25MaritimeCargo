/* Generated by AN DISI Unibo */ 
package it.unibo.cargorobot

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.planner.*
import main.java.planner.HoldMap.*

class Cargorobot ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				val planner = PlannerForHold()
				val STEP = 160
				var Slot = 0
				
				var Path = ""
				var CurrMove = ""
				var NextTarget = CellType.IOPORT
				var Trapped = false
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						CommUtils.outgreen("$name: STARTING...")
						
									planner.initRobotState()
									HoldMapLoader.fromTextToBinFile("./HoldMap.txt");
									planner.loadMap("./HoldMap.bin")
						CommUtils.outgreen("$name: engaging BasicRobot...")
						request("engage", "engage(cargorobot,$STEP)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t014",targetState="engagedone",cond=whenReply("engagedone"))
					transition(edgeName="t015",targetState="engagerefused",cond=whenReply("engagerefused"))
				}	 
				state("engagedone") { //this:State
					action { //it:State
						CommUtils.outgreen("$name: initialization complete")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("engagerefused") { //this:State
					action { //it:State
						CommUtils.outgreen("$name: engage failed")
						CommUtils.outgreen("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("idle") { //this:State
					action { //it:State
						CommUtils.outgreen("$name: idle at home...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t016",targetState="evaluatenexttarget",cond=whenRequest("doDelivery"))
					transition(edgeName="t017",targetState="halt",cond=whenEvent("stop"))
				}	 
				state("evaluatenexttarget") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("doDelivery(Slot)"), Term.createTerm("doDelivery(Slot)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outgreen("$name: moving to ioport...")
								
												val target = planner.getCellCoordsByType(NextTarget)
												Path = planner.findPath(target[0], target[1])
													
												Slot = payloadArg(0).toInt()
												var code = (Slot + 64).toChar()
												NextTarget = CellType.fromCode("" + code)
						}else{
							CommUtils.outgreen("$name: container operation...")
							delay(2000) 
							 
											if(NextTarget != CellType.IOPORT) {
												val target = planner.getCellCoordsByType(NextTarget)
												Path = planner.findPath(target[0], target[1])
												
												if(NextTarget == CellType.HOME) {
													NextTarget = CellType.IOPORT
												} else {
													NextTarget = CellType.HOME
												}	
							
											} else {
												Path = "end"
											}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="pathsuccess", cond=doswitchGuarded({ Path == "end" && NextTarget == CellType.IOPORT  
					}) )
					transition( edgeName="goto",targetState="evaluatemove", cond=doswitchGuarded({! ( Path == "end" && NextTarget == CellType.IOPORT  
					) }) )
				}	 
				state("evaluatemove") { //this:State
					action { //it:State
						if(  Path.length > 0  
						 ){
										CurrMove = Path.substring(0, 1)
										Path = Path.substring(1, Path.length)
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="evaluatenexttarget", cond=doswitchGuarded({ Path.length == 0  
					}) )
					transition( edgeName="goto",targetState="domove", cond=doswitchGuarded({! ( Path.length == 0  
					) }) )
				}	 
				state("domove") { //this:State
					action { //it:State
						 planner.doPath(CurrMove)  
						if(  CurrMove == "w"  
						 ){request("step", "step($STEP)" ,"basicrobot" )  
						}
						else
						 {forward("cmd", "cmd($CurrMove)" ,"basicrobot" ) 
						 delay(160) 
						 forward("goon", "goon(1)" ,name ) 
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t118",targetState="halt",cond=whenEvent("stop"))
					transition(edgeName="t119",targetState="evaluatemove",cond=whenReply("stepdone"))
					transition(edgeName="t120",targetState="pathfailure",cond=whenReply("stepfailed"))
					transition(edgeName="t121",targetState="evaluatemove",cond=whenDispatch("goon"))
				}	 
				state("pathsuccess") { //this:State
					action { //it:State
						CommUtils.outgreen("$name: home sweet home")
						answer("doDelivery", "deliveryDone", "deliveryDone(1)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("pathfailure") { //this:State
					action { //it:State
						CommUtils.outgreen("$name: path failure, trying to go back home")
						delay(700) 
						if(  NextTarget != CellType.HOME  
						 ){ NextTarget = CellType.HOME  
						}
						else
						 { Trapped = true  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="evaluatenexttarget", cond=doswitchGuarded({ !Trapped  
					}) )
					transition( edgeName="goto",targetState="trapped", cond=doswitchGuarded({! ( !Trapped  
					) }) )
				}	 
				state("trapped") { //this:State
					action { //it:State
						CommUtils.outgreen("$name: help, I'm trapped!")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("halt") { //this:State
					action { //it:State
						CommUtils.outgreen("$name: STOPPED")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t222",targetState="resume",cond=whenEvent("resume"))
				}	 
				state("resume") { //this:State
					action { //it:State
						CommUtils.outgreen("$name: RESUME")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitchGuarded({ Path == "end" && NextTarget == CellType.IOPORT  
					}) )
					transition( edgeName="goto",targetState="evaluatemove", cond=doswitchGuarded({! ( Path == "end" && NextTarget == CellType.IOPORT  
					) }) )
				}	 
			}
		}
} 
