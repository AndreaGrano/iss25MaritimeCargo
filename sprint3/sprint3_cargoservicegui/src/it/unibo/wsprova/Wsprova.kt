/* Generated by AN DISI Unibo */ 
package it.unibo.wsprova

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.*

class Wsprova ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
		        val HoldWSServer = HoldWSServer();
		        HoldWSServer.start();
		        var Slot = 0;
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | starts")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handleLoadRequest",cond=whenRequest("loadRequest"))
				}	 
				state("handleLoadRequest") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("loadRequest(PID)"), Term.createTerm("loadRequest(PID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												val PID = payloadArg(0).toInt();
												Slot = (Slot % 4) + 1;
												val Weight = Math.random() * 50;
								answer("loadRequest", "loadReply", "loadReply($Slot,$PID,$Weight)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="handleLoadRequest",cond=whenRequest("loadRequest"))
				}	 
			}
		}
} 
