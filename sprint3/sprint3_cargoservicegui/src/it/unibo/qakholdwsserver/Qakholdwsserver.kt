/* Generated by AN DISI Unibo */ 
package it.unibo.qakholdwsserver

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.*

class Qakholdwsserver ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
		        val holdWSServer = HoldWSServer();
		        holdWSServer.start();
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | starts")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="halt",cond=whenEvent("stop"))
					transition(edgeName="t01",targetState="updateHold",cond=whenEvent("holdChanged"))
				}	 
				state("halt") { //this:State
					action { //it:State
						 holdWSServer.haltCargo()  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t12",targetState="resume",cond=whenEvent("resume"))
				}	 
				state("resume") { //this:State
					action { //it:State
						 holdWSServer.resumeCargo()  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("updateHold") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("holdChanged(Slot,PID,Weight)"), Term.createTerm("holdChanged(Slot,PID,Weight)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val Slot = payloadArg(0).toInt();
												val PID = payloadArg(1).toInt();
												val Weight = payloadArg(2).toDouble();
												holdWSServer.updateHold(Slot,PID,Weight);
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
