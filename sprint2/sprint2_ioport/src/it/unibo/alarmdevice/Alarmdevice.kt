/* Generated by AN DISI Unibo */ 
package it.unibo.alarmdevice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Alarmdevice ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		 lateinit var p : Process  
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						CommUtils.outred("$name: STARTING...")
						subscribeToLocalActor("alarmmanager") 
						subscribeToLocalActor("alarmmanager") 
						CommUtils.outred("$name: initialization complete")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						CommUtils.outred("$name: waiting for distances...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="turnledon",cond=whenEvent("stop"))
					transition(edgeName="t06",targetState="turnledoff",cond=whenEvent("resume"))
				}	 
				state("turnledon") { //this:State
					action { //it:State
						CommUtils.outred("$name: turning on the LED")
						 
									if(p.isAlive()) {
										p.destroy()
									}
									p = machineExec("python ledPython25On.py") 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("turnledoff") { //this:State
					action { //it:State
						CommUtils.outred("$name: turning off the LED")
						 
									if(p.isAlive()) {
										p.destroy()
									}
									p = machineExec("python ledPython25Off.py") 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
