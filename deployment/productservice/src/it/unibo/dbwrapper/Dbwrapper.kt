/* Generated by AN DISI Unibo */ 
package it.unibo.dbwrapper

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.dbdriver.*

class Dbwrapper ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
		        val wrapper = Wrapper()
		        lateinit var CurrProduct : Product
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						CommUtils.outyellow("$name: STARTING...")
						CommUtils.outyellow("$name: initialization complete")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						CommUtils.outyellow("$name: waiting...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="createproduct",cond=whenRequest("createProduct"))
					transition(edgeName="t01",targetState="deleteproduct",cond=whenRequest("deleteProduct"))
				}	 
				state("createproduct") { //this:State
					action { //it:State
						CommUtils.outyellow("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("createProduct(Name,Weight)"), Term.createTerm("createProduct(Name,Weight)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
									        	var Name = payloadArg(0)
									        	var Weight = payloadArg(1).toDouble()
									            var product = wrapper.createProduct(Name, Weight)
								if(  product != null  
								 ){ 
									        		var PID = product.getPID()	
								answer("createProduct", "createdProduct", "createdProduct($PID)"   )  
								}
								else
								 { var PID = -1  
								 answer("createProduct", "createdProduct", "createdProduct($PID)"   )  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("deleteproduct") { //this:State
					action { //it:State
						CommUtils.outyellow("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("deleteProduct(PID)"), Term.createTerm("deleteProduct(PID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
									        	var PID = payloadArg(0).toInt()
									            var product = wrapper.deleteProduct(PID)
								if(  product != null  
								 ){ 	var Name = product.getName()
									        		var	Weight = product.getWeight()
								answer("deleteProduct", "deletedProduct", "deletedProduct($Name,$Weight)"   )  
								}
								else
								 { 	var Name = "NOT_FOUND"
								 	        		var	Weight = 0.0
								 answer("deleteProduct", "deletedProduct", "deletedProduct($Name,$Weight)"   )  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
} 
