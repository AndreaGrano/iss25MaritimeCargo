/* Generated by AN DISI Unibo */ 
package it.unibo.containermanager

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Containermanager ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				val DFREE = 10
				var containerCount = 0
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name: STARTING...")
						subscribeToLocalActor("sonarwrapper") 
						CommUtils.outmagenta("$name: initialization complete")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name: waiting for distances...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="evaluatedistance",cond=whenEvent("distance"))
				}	 
				state("evaluatedistance") { //this:State
					action { //it:State
						if(  containerCount < 3  
						 ){if(  (V > 0) && (V < DFREE/2)  
						 ){ containerCount += 1  
						}
						else
						 {CommUtils.outmagenta("$name: new container waiting!")
						 request("containerWaiting", "containerWaiting(V)" ,"cargoservice" )  
						  containerCount = 0  
						 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t11",targetState="wait",cond=whenReply("containerLoaded"))
				}	 
			}
		}
} 
