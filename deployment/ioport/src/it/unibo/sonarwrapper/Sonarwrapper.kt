/* Generated by AN DISI Unibo */ 
package it.unibo.sonarwrapper

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import java.io.*

class Sonarwrapper ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				lateinit var p : Process
				lateinit var reader : BufferedReader 
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name: STARTING...")
						
									try {
										p = Runtime.getRuntime().exec("python3 sonar.py")
										reader = BufferedReader(InputStreamReader(p.getInputStream()))
									} catch(e : Exception) {
										println("sonarwrapper sonarStart ERROR: $e")
									}
						CommUtils.outmagenta("$name: initialization complete")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="sendsonardata", cond=doswitch() )
				}	 
				state("sendsonardata") { //this:State
					action { //it:State
						
									try {
										var V = reader.readLine()
										if(V != null) {
											val payload = "distance( ${V} )"
											val event = MsgUtil.buildEvent("sonarwrapper", "distance", payload)
											
											emitLocalStreamEvent(event)
										}
									} catch(e : Exception) {
										println("sonarwrapper sendSonarData ERROR: $e")
									}
						delay(1000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="sendsonardata", cond=doswitch() )
				}	 
			}
		}
} 
