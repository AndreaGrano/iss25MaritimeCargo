/* Generated by AN DISI Unibo */ 
package it.unibo.dbwrapper

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.dbdriver.*

class Dbwrapper ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
		        val wrapper = Wrapper()
		        lateinit var CurrProduct : Product
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						CommUtils.outyellow("$name: STARTING...")
						CommUtils.outyellow("$name: initialization complete")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						CommUtils.outyellow("$name: waiting...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="getproductweight",cond=whenRequest("getProductWeight"))
					transition(edgeName="t01",targetState="getfreeslot",cond=whenRequest("getFreeSlot"))
					transition(edgeName="t02",targetState="getloadedweight",cond=whenRequest("getLoadedWeight"))
					transition(edgeName="t03",targetState="updatehold",cond=whenDispatch("updateHold"))
					transition(edgeName="t04",targetState="getholdstatus",cond=whenRequest("getHoldStatus"))
				}	 
				state("getproductweight") { //this:State
					action { //it:State
						CommUtils.outyellow("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("getProductWeight(PID)"), Term.createTerm("getProductWeight(PID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
								                val PID = payloadArg(0).toInt()
								                CurrProduct = wrapper.getProduct(PID)
								if(  !CurrProduct.getName().equals("NOT_FOUND")  
								 ){ 
												  val ProdWeight = CurrProduct.getWeight()
								answer("getProductWeight", "productWeight", "productWeight($ProdWeight)"   )  
								}
								else
								 {answer("getProductWeight", "productWeight", "productWeight(0)"   )  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("getfreeslot") { //this:State
					action { //it:State
						CommUtils.outyellow("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("getFreeSlot(V)"), Term.createTerm("getFreeSlot(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
								                val FreeSlot = wrapper.getFirstAvailableSlot()
								answer("getFreeSlot", "freeSlot", "freeSlot($FreeSlot)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("getloadedweight") { //this:State
					action { //it:State
						CommUtils.outyellow("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("getLoadedWeight(V)"), Term.createTerm("getLoadedWeight(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
									    		var slotsList = wrapper.getAllSlots()
									    		
									    		var LoadedWeight = 0.0
									    		for(slot in slotsList) {
									    			var PID = slot.getPID()
									    			if(PID > 0) {
										    			var product = wrapper.getProduct(PID)
										    			LoadedWeight += product.getWeight()
										    		}
									    		}
								answer("getLoadedWeight", "loadedWeight", "loadedWeight($LoadedWeight)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("updatehold") { //this:State
					action { //it:State
						CommUtils.outyellow("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("updateHold(Slot,PID)"), Term.createTerm("updateHold(Slot,PID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
									            val Slot = payloadArg(0).toInt()
									            val PID = payloadArg(1).toInt()
									            val res = wrapper.loadProduct(PID)
									            
									            var product = wrapper.getProduct(PID)
									            var Weight = product.getWeight()
								emit("holdChanged", "holdChanged($Slot,$PID,$Weight)" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("getholdstatus") { //this:State
					action { //it:State
						CommUtils.outyellow("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						
						//    		var PIDs = arrayOf<Int>(0, 0, 0, 0)
						//    		var Weights = arrayOf<Double>(0.0, 0.0, 0.0, 0.0)
						//    		
						//    		for (i in 0..3) {
						//    			var Slot = wrapper.getSlot(i + 1)
						//    			
						//    			var PID = Slot.getPID()
						//    			if(PID > 0) {
						//    				PIDs.set(i, PID)
						//    				
						//    				var Product = wrapper.getProduct(PID)
						//    				var Weight = Product.getWeight()
						//    				Weights.set(i, Weight)
						//    			}
						//    		}
						
									var P1 = 0
									var W1 = 0.0
									var Slot1 = wrapper.getSlot(1)
									var PID1 = Slot1.getPID()
									if(PID1 > 0) {
										P1 = PID1
										
										var Product = wrapper.getProduct(PID1)
										W1 = Product.getWeight()
									}
									
									var P2 = 0
									var W2 = 0.0
									var Slot2 = wrapper.getSlot(2)
									var PID2 = Slot2.getPID()
									if(PID2 > 0) {
										P2 = PID2
										
										var Product = wrapper.getProduct(PID2)
										W2 = Product.getWeight()
									}
									
									var P3 = 0
									var W3 = 0.0
									var Slot3 = wrapper.getSlot(3)
									var PID3 = Slot3.getPID()
									if(PID3 > 0) {
										P3 = PID3
										
										var Product = wrapper.getProduct(PID3)
										W3 = Product.getWeight()
									}
									
									var P4 = 0
									var W4 = 0.0
									var Slot4 = wrapper.getSlot(4)
									var PID4 = Slot4.getPID()
									if(PID4 > 0) {
										P4 = PID4
										
										var Product = wrapper.getProduct(PID4)
										W4 = Product.getWeight()
									}
						answer("getHoldStatus", "holdStatus", "holdStatus($P1,$W1,$P2,$W2,$P3,$W3,$P4,$W4)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
} 
