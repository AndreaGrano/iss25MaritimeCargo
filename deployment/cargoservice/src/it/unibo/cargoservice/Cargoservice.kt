/* Generated by AN DISI Unibo */ 
package it.unibo.cargoservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Cargoservice ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
					//val MAX_LOAD = System.getenv("MAX_LOAD").toDouble()
					//val SLOTS = System.getenv("SLOTS").toInt()
					
					val MAX_LOAD = 80.0
					val SLOTS = 4
					
					var PID = -1
					var Slot = -1
					var Loadedweight = 0.0
					var assignedSlots = ArrayList<Int>();
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						CommUtils.outblue("$name: STARTING...")
						CommUtils.outblue("$name: initialization complete")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						CommUtils.outblue("$name: waiting for requests...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="handle_loadproduct",cond=whenRequest("loadProduct"))
					transition(edgeName="t06",targetState="halt",cond=whenEvent("stop"))
					transition(edgeName="t07",targetState="containerwaiting",cond=whenRequest("containerWaiting"))
					transition(edgeName="t08",targetState="deliverydone",cond=whenReply("deliveryDone"))
				}	 
				state("handle_loadproduct") { //this:State
					action { //it:State
						CommUtils.outblue("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("loadProduct(PID)"), Term.createTerm("loadProduct(PID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												PID = payloadArg(0).toInt()
								request("getFreeSlot", "getFreeSlot(1)" ,"holdmanager" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t19",targetState="evaluate_slot",cond=whenReply("freeSlot"))
				}	 
				state("evaluate_slot") { //this:State
					action { //it:State
						CommUtils.outblue("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("freeSlot(FreeSlot)"), Term.createTerm("freeSlot(Slot)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Slot = payloadArg(0).toInt()  
								if(  Slot > 0  
								 ){request("getLoadedWeight", "getLoadedWeight(1)" ,"holdmanager" )  
								}
								else
								 {CommUtils.outblue("$name: load rejected, no more free slots")
								 answer("loadProduct", "loadRejected", "loadRejected(NO_AVAILABLE_SLOT)"   )  
								 forward("goToWait", "goToWait(1)" ,name ) 
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t210",targetState="update_loaded_weight",cond=whenReply("loadedWeight"))
					transition(edgeName="t211",targetState="wait",cond=whenDispatch("goToWait"))
				}	 
				state("update_loaded_weight") { //this:State
					action { //it:State
						CommUtils.outblue("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("loadedWeight(Weight)"), Term.createTerm("loadedWeight(Weight)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Loadedweight = payloadArg(0).toDouble()  
								request("getProductWeight", "getProductWeight($PID)" ,"dbwrapper" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t312",targetState="evaluate_weight",cond=whenReply("productWeight"))
				}	 
				state("evaluate_weight") { //this:State
					action { //it:State
						CommUtils.outblue("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("productWeight(Weight)"), Term.createTerm("productWeight(Weight)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var Productweight = payloadArg(0).toDouble()  
								if(  Productweight > 0  
								 ){if(  (Loadedweight + Productweight) <= MAX_LOAD  
								 ){CommUtils.outblue("$name: load accepted")
								forward("updateHold", "updateHold($Slot,$PID)" ,"holdmanager" ) 
								 assignedSlots.add(Slot)  
								answer("loadProduct", "loadAccepted", "loadAccepted($Slot,$PID,$Productweight)"   )  
								}
								else
								 {CommUtils.outblue("$name: load rejected, too heavy")
								 answer("loadProduct", "loadRejected", "loadRejected(TOO_HEAVY)"   )  
								 }
								}
								else
								 {answer("loadProduct", "loadRejected", "loadRejected(DOES_NOT_EXIST)"   )  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("containerwaiting") { //this:State
					action { //it:State
						if(  assignedSlots.size > 0  
						 ){CommUtils.outblue("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("containerWaiting(V)"), Term.createTerm("containerWaiting(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
													var Slot =  assignedSlots.get(0)
													assignedSlots.removeAt(0)
								request("doDelivery", "doDelivery($Slot)" ,"cargorobot" )  
						}
						}
						else
						 {answer("containerWaiting", "containerLoaded", "containerLoaded(1)"   )  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("deliverydone") { //this:State
					action { //it:State
						CommUtils.outblue("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						answer("containerWaiting", "containerLoaded", "containerLoaded(1)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("halt") { //this:State
					action { //it:State
						CommUtils.outblue("$name: STOPPED")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t413",targetState="wait",cond=whenEvent("resume"))
				}	 
			}
		}
} 
