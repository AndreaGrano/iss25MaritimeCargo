/* Generated by AN DISI Unibo */ 
package it.unibo.cargorobot

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.planner.*
import main.java.planner.HoldMap.*

class Cargorobot ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				val planner = PlannerForHold()
				val STEP = 170
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						CommUtils.outgreen("$name: STARTING...")
						
									planner.initRobotState()
									HoldMapLoader.fromTextToBinFile("./HoldMap.txt");
									planner.loadMap("./HoldMap.bin")
						CommUtils.outgreen("$name: engaging BasicRobot...")
						request("engage", "engage(cargorobot,$STEP)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="engagedone",cond=whenReply("engagedone"))
					transition(edgeName="t01",targetState="engagerefused",cond=whenReply("engagerefused"))
				}	 
				state("engagedone") { //this:State
					action { //it:State
						CommUtils.outgreen("$name: initialization complete")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("engagerefused") { //this:State
					action { //it:State
						CommUtils.outgreen("$name: engage failed")
						CommUtils.outgreen("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("idle") { //this:State
					action { //it:State
						CommUtils.outgreen("$name: idle at home...")
						delay(3000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="movetoioport",cond=whenDispatch("go"))
				}	 
				state("movetoioport") { //this:State
					action { //it:State
						CommUtils.outgreen("$name: moving to ioport...")
						
									val target = planner.getCellCoordsByType(CellType.IOPORT)
									val Path = planner.findPath(target[0], target[1])
									planner.doPath(Path)
						request("doplan", "doplan($Path,$STEP)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t13",targetState="movetoslot",cond=whenReply("doplandone"))
					transition(edgeName="t14",targetState="pathfailure",cond=whenReply("doplanfailed"))
				}	 
				state("movetoslot") { //this:State
					action { //it:State
						CommUtils.outgreen("$name: loading container...")
						delay(2000) 
						CommUtils.outgreen("$name: moving to slot...")
						
									val target = planner.getCellCoordsByType(CellType.SLOT4)
									val Path = planner.findPath(target[0], target[1])
									planner.doPath(Path)
						request("doplan", "doplan($Path,$STEP)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t25",targetState="movebackhome",cond=whenReply("doplandone"))
					transition(edgeName="t26",targetState="pathfailure",cond=whenReply("doplanfailed"))
				}	 
				state("movebackhome") { //this:State
					action { //it:State
						CommUtils.outgreen("$name: leaving container...")
						delay(2000) 
						CommUtils.outgreen("$name: moving back home...")
						
									val target = planner.getCellCoordsByType(CellType.HOME)
									val Path = planner.findPath(target[0], target[1])
									planner.doPath(Path)
						request("doplan", "doplan($Path,$STEP)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t37",targetState="idle",cond=whenReply("doplandone"))
					transition(edgeName="t38",targetState="trapped",cond=whenReply("doplanfailed"))
				}	 
				state("pathfailure") { //this:State
					action { //it:State
						CommUtils.outgreen("$name: path failure, trying to go back home")
						delay(700) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="movebackhome", cond=doswitch() )
				}	 
				state("trapped") { //this:State
					action { //it:State
						CommUtils.outgreen("$name: help, I'm trapped!")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
