/* Generated by AN DISI Unibo */ 
package it.unibo.usagemock

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Usagemock ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name: STARTING...")
						CommUtils.outmagenta("$name: Hi! I'm going to simulate a load cycle in which something unfortunate is going to happen...")
						delay(5000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="sendwrongone", cond=doswitch() )
				}	 
				state("sendwrongone") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name: ok, let's do this!")
						CommUtils.outmagenta("$name: now I'm sending a load requests for product that doesn't exist (PID: 1)")
						request("loadProduct", "loadProduct(1)" ,"cargoservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="firstrefused",cond=whenReply("loadRejected"))
					transition(edgeName="t01",targetState="ohno",cond=whenReply("loadAccepted"))
				}	 
				state("firstrefused") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						CommUtils.outmagenta("$name: as expected, this first load request was refused!")
						delay(5000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="sendgoodone", cond=doswitch() )
				}	 
				state("sendgoodone") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name: now I'm sending a load request for a Baccapesca (PID: 1752625846)")
						CommUtils.outmagenta("$name: they are sweet indeed")
						request("loadProduct", "loadProduct(1752625846)" ,"cargoservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t12",targetState="sendcontainerwaiting",cond=whenReply("loadAccepted"))
					transition(edgeName="t13",targetState="ohno",cond=whenReply("loadRejected"))
				}	 
				state("sendcontainerwaiting") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name: now I'm sending a containerWaiting")
						request("containerWaiting", "containerWaiting(1)" ,"cargoservice" )  
						delay(10000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="sendstop", cond=doswitch() )
				}	 
				state("sendstop") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name: plot twist, I'm emitting a STOP event!")
						emit("stop", "stop(1)" ) 
						delay(5000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="sendresume", cond=doswitch() )
				}	 
				state("sendresume") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name: everything should have been stopped in the past 5 seconds")
						CommUtils.outmagenta("$name: now I'm emitting a RESUME event")
						emit("resume", "resume(1)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t24",targetState="happyending",cond=whenReply("containerLoaded"))
				}	 
				state("happyending") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						CommUtils.outmagenta("$name: the container has been loaded! Remember to check if the robot is back home!")
						CommUtils.outmagenta("$name: my job here has been done, it was a pleasure, see ya!")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("ohno") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						CommUtils.outmagenta("$name: something bad happen indeed :(")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
